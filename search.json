[{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://elong0527.github.io/forestly/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://elong0527.github.io/forestly/articles/design-pattern.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Design Plan of R Package forestly","text":"forestly package developed generate interactive forest plot safety analysis clinical trials. generate interactive forest plot, develop three main functions listed . details three main functions introduced next three sections separately. tidy_ae_table: function used obtain adverse event (AE) information ready visualization. download_ae_reports: function used generate download button, users can download AE summary tables clicking button. forestly: function used generate interactive forest plot. minimal example summarized major steps using forestly package ","code":"mydata <- tidy_ae_table(...)    # Step 1: create tidy AE data download_ae_reports(mydata)     # Step 2: generate download button forestly(mydata)                # Step 3: generate interactive forest plot                                 # (the order of Step 2 and Step 3 can be reversed)"},{"path":"https://elong0527.github.io/forestly/articles/design-pattern.html","id":"main-function-1-tidy_ae_table","dir":"Articles","previous_headings":"","what":"Main function 1: tidy_ae_table()","title":"Design Plan of R Package forestly","text":"main function tidy_ae_table() used obtain AE information ready visualization. Specifically speaking, merges standardized adsl adae tables together, outputs AE summary table. AE summary table summarizes number/ratio subjects experiencing certain AE treatment arm control arm. utility functions developed inside tidy_ae_table() list follows. tidy_population(): function used prepare observation datasets use function tidy_ae_table(). function filter adsl dataset, define proper treatment order dataset. tidy_observation(): function used prepare observation datasets use function tidy_ae_table(). function filter adae dataset, define proper treatment order dataset. `prop_test_mn(): function tests equal proportion using Miettinen Nurminen method. forestly package, generates confidence interval (CI) risk difference treatment arm control arm. define_ae_selectList(): function specify AE labels displayed select list interactive forestly plot. two arguments, (1) ae_criterion (2) ae_label. first argument ae_criterion (vector ) string, defines criterion select class AE display interactive forest plot. example, ae_criterion = 'AESER == \"Y\"', select serious AE. second argument ae_label (vector ) string, defines labels displayed select list interactive forest plot. two arguments string vectors, must 1:1 map. function used arguments ae_interested = function tidy_ae_table() (see examples ). throws errors length ae_criterion doesn’t match ae_label. tidy_multi_ae_label(): function design rbind data together according interested AE labels defined ae_interested =. example, use Example 1 , tidy_multi_ae_label() generate AE summary table rbind(summary table AE, summary serious AE). tidy_ae_listing(): function generates data frame serves listed details reactable.","code":"# Example 1: if you would like to display the serious AE tidy_ae_table(...,               ae_interested = define_ae_selectList(ae_criterion = 'AESER == \"Y\"',                                                    ae_label = \"serious AE\"),               ...).  # Example 2: if you would like to display both serious AE and drug-related AE tidy_ae_table(...,               ae_interested = define_ae_selectList(ae_criterion = c('AESER != \"N\"', 'AEREL != \"None\"'),                                                    ae_label = c(\"serious AE\", \"drug-related AE\")               ...)."},{"path":"https://elong0527.github.io/forestly/articles/design-pattern.html","id":"main-function-2-tlf_download","dir":"Articles","previous_headings":"","what":"Main function 2: tlf_download()","title":"Design Plan of R Package forestly","text":"function generates download button users download AE tables. Example: https://merck.github.io/r2rtf/articles/example-ae-summary.html tlf_ae_specific: function create specific AE table. tlf_ae_listing: function create AE listing. output tlf_xxx functions r2rtf objects created rtf_encode tlf_download: function download multiple TLFs Rmarkdown. Rewrite ae_download_report allow use tlf_xxx functions input.","code":"tlf_ae_summary()   # generate the AE summary table tlf_ae_specific()  # generate the specific AE table # tlf[[4]] <- tlf_ae_listing()   # As needed ????  tlf_download()    # download the above tables"},{"path":"https://elong0527.github.io/forestly/articles/design-pattern.html","id":"main-function-3-forestly","dir":"Articles","previous_headings":"","what":"Main function 3: forestly()","title":"Design Plan of R Package forestly","text":"function generates interactive forest plot returned objected tidy_ae_table(). interactive forstly plot, consists two blocks. first block select list. items listed select list specified ae_label = function tidy_ae_table(..., ae_interested = , ...). clicking different AE labels, different reactable generated. example, click “serious AE”, reactable display serious AE summary table. main tool develop block crosstalk::filter_select(). second block reactable. reactable summarizes AE information selected AE label. main tool develop block reactable::reactable(). utility functions used develop forestly() listed follows. forestly_design_details(): function returns design details reactable forest plot, including design details cell two proportions; design details cell CI; design details footer two proportions; design details footer CI. design details returned another utility function sparkline_point_js(), introduce details later. generate design details, users need specify elements design, including color: color two proportion/CI plot (see arguments fig_prop_color = fig_diff_color =); label: labels displayed two proportion/CI plot (see arguments fig_prop_label = fig_diff_label =); column width: column width two proportion/CI plot (see arguments fig_prop_colwidth = fig_diff_colwidth =); range: x-axis range plot two proportion/CI plot (see arguments fig_prop_range = fig_diff_range =). sparkline_point_js(): function generates Javascript rendered. used design details reactables, including cell footer. dependence files path forestly/inst/js/sparkline.js. mk_reactable(): function used create data table tabular data sorting pagination default. Essentially, wrapper function reactable() robust BAAMR usage. dependence R package reactable.","code":""},{"path":"https://elong0527.github.io/forestly/articles/design-pattern.html","id":"other-utility-filesfunctions","dir":"Articles","previous_headings":"","what":"Other utility files/functions","title":"Design Plan of R Package forestly","text":"important_functions.R: used declare R-package dependency functions used develop functions.","code":""},{"path":"https://elong0527.github.io/forestly/articles/forestly.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Interactive Forest Plot","text":"forestly package creates interactive forest plots clinical trial analysis & reporting. Specific adverse events analysis Subgroup analysis assume ADaM datasets ready analysis leverage metalite data structure define inputs outputs.","code":"forestly_adsl$TRTA <- factor(forestly_adsl$TRT01A, levels = c(\"Xanomeline Low Dose\", \"Placebo\"), labels = c(\"Low Dose\", \"Placebo\"))  forestly_adae$TRTA <- factor(forestly_adae$TRTA, levels = c(\"Xanomeline Low Dose\", \"Placebo\"), labels = c(\"Low Dose\", \"Placebo\")) meta_forestly(   dataset_adsl = forestly_adsl,   dataset_adae = forestly_adae,   population_term = \"apat\",   observation_term = \"wk12\" ) |>   prepare_ae_forestly(parameter = \"any;rel;ser\") |>   format_ae_forestly() |>   ae_forestly()"},{"path":"https://elong0527.github.io/forestly/articles/forestly.html","id":"interactive-features","dir":"Articles","previous_headings":"","what":"Interactive features","title":"Interactive Forest Plot","text":"interactive features example include: Select different AE criteria. Filter incidence AE one group. Revealed information hovering mouse point. Search bars find subjects selected adverse events (AE). Sort value click column header. Drill-listing clicking \\(\\blacktriangleright\\).","code":""},{"path":"https://elong0527.github.io/forestly/articles/forestly.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Interactive Forest Plot","text":"general workflow : meta_forestly() constructs input metadata treatment analysis ADaM datasets. prepare_ae_forestly() prepares datasets interactive forest plot. format_ae_forestly() formats output layout. ae_forestly() generates interactive forest plot. meta_forestly() wrapper function metalite package. function users simplify process define input parameters required generate interactive forest plot. meta_forestly function require dataset_adsl, dataset_adae, observation_term population_term arguments. dataset_adsl, dataset_adae input ADaM dataset population observation. example, use “apat” population_term “wk12” observation_term. subset creteria terms, using SAFFL == \"Y\" default meta_forestly(). user wants customize definitions terms define new terms, tutorials can found link. paramter level metadata, parameter_term selected predefined terms listed . default, choose three parameter terms rel, ser use “;” concatenate allow three types AE displayed one interactive forest plot. following example, define ITT subset criteria ITTFL == \"Y\"population TEAE subset criteria TRTEMFL == \"Y\" observation. parameter, choose ser nonser pre-defined parameter list. metadata defined, can create interactive forest plot . section, calculate statistics prepare plotting dataset using prepare_ae_forestly(). Argument parameter required since can select parameter one defined metadata. use format_ae_forestly() format output ae_forestly() create interactive forest plot. Default value used arguments two functions. first example, select , ser nonser. example select , rel ser.","code":"meta_forestly(   dataset_adsl = forestly_adsl,   dataset_adae = forestly_adae,   population_term = \"apat\",   observation_term = \"wk12\" ) #> ADaM metadata:  #>    .$data_population     Population data with 170 subjects  #>    .$data_observation    Observation data with 736 records  #>    .$plan    Analysis plan with 1 plans  #>  #>  #>   Analysis population type: #>     name        id  group var       subset label #> 1 'apat' 'USUBJID' 'TRTA'     SAFFL == 'Y'    '' #>  #>  #>   Analysis observation type: #>     name        id  group var       subset label #> 1 'wk12' 'USUBJID' 'TRTA'     SAFFL == 'Y'    '' #>  #>  #>   Analysis parameter type: #>    name                         label                     subset #> 1 'any'          'any adverse events'                            #> 2 'rel' 'drug-related adverse events' toupper(AREL) == 'RELATED' #> 3 'ser'      'serious adverse events'               AESER == 'Y' #>  #>  #>   Analysis function: #>            name                     label #> 1 'ae_forestly' 'Interactive forest plot' meta <- meta_forestly(   dataset_adsl = forestly_adsl,   dataset_adae = forestly_adae,   population_term = \"ITT\",   population_subset = ITTFL == \"Y\",   observation_term = \"TEAE\",   observation_subset = TRTEMFL == \"Y\",   parameter_term = \"any;ser;nonser;rel\" ) meta #> ADaM metadata:  #>    .$data_population     Population data with 170 subjects  #>    .$data_observation    Observation data with 736 records  #>    .$plan    Analysis plan with 1 plans  #>  #>  #>   Analysis population type: #>    name        id  group var       subset label #> 1 'ITT' 'USUBJID' 'TRTA'     ITTFL == 'Y'    '' #>  #>  #>   Analysis observation type: #>     name        id  group var         subset label #> 1 'TEAE' 'USUBJID' 'TRTA'     TRTEMFL == 'Y'    '' #>  #>  #>   Analysis parameter type: #>       name                         label                      subset #> 1    'any'          'any adverse events'                             #> 2    'ser'      'serious adverse events'                AESER == 'Y' #> 3 'nonser'  'non-serious adverse events' AESER != 'Y' | is.na(AESER) #> 4    'rel' 'drug-related adverse events'  toupper(AREL) == 'RELATED' #>  #>  #>   Analysis function: #>            name                     label #> 1 'ae_forestly' 'Interactive forest plot' meta |>   prepare_ae_forestly(parameter = \"any;ser;nonser\") |>   format_ae_forestly() |>   ae_forestly() meta |>   prepare_ae_forestly(parameter = \"any;rel;ser\") |>   format_ae_forestly() |>   ae_forestly()"},{"path":"https://elong0527.github.io/forestly/articles/forestly.html","id":"define-metadata","dir":"Articles","previous_headings":"","what":"Define metadata","title":"Interactive Forest Plot","text":"order provide flexibility different analysis, forestly package also allows way construct metadata. show simplified example metalite package. details can found metalite package website. start construct metadata using metalite. output metadata contains two observation wk12 period1 illustration purpose. Also, parameter, subset criteria AEREL %% c(\"POSSIBLE\", \"PROBABLE\") instead toupper(AREL) == \"RELATED\" order fit observation dataset. metadata defined, can create interactive forest plot wk12 . Using similar approach, create interactive forest plot period1.","code":"library(metalite) meta <- meta_adam(   population = forestly_adsl,   observation = forestly_adae ) |>   define_plan(plan = plan(     analysis = \"ae_forestly\",     population = \"apat\",     observation = c(\"wk12\", \"period1\"),     parameter = \"any;rel;ser\"   )) |>   define_population(     name = \"apat\",     group = \"TRTA\",     subset = quote(SAFFL == \"Y\")   ) |>   define_observation(     name = \"wk12\",     group = \"TRTA\",     subset = quote(SAFFL == \"Y\"),     label = \"Weeks 0 to 12\"   ) |>   define_observation(     name = \"period1\",     group = \"TRTA\",     var = \"AEDECOD\",     subset = quote(TRTEMFL == \"Y\" & SAFFL == \"Y\"),     label = \"Period 1\"   ) |>   define_parameter(     name = \"rel\",     subset = quote(AEREL %in% c(\"POSSIBLE\", \"PROBABLE\"))   ) |>   define_analysis(     name = \"ae_forestly\",     label = \"Interactive forest plot\"   ) |>   meta_build() meta #> ADaM metadata:  #>    .$data_population     Population data with 170 subjects  #>    .$data_observation    Observation data with 736 records  #>    .$plan    Analysis plan with 2 plans  #>  #>  #>   Analysis population type: #>     name        id  group var       subset                         label #> 1 'apat' 'USUBJID' 'TRTA'     SAFFL == 'Y' 'All Participants as Treated' #>  #>  #>   Analysis observation type: #>        name        id  group       var                        subset #> 1    'wk12' 'USUBJID' 'TRTA'                            SAFFL == 'Y' #> 2 'period1' 'USUBJID' 'TRTA' 'AEDECOD' TRTEMFL == 'Y' & SAFFL == 'Y' #>             label #> 1 'Weeks 0 to 12' #> 2      'Period 1' #>  #>  #>   Analysis parameter type: #>    name                         label                               subset #> 1 'rel' 'drug-related adverse events' AEREL %in% c('POSSIBLE', 'PROBABLE') #> 2 'any'          'any adverse events'                                      #> 3 'ser'      'serious adverse events'                         AESER == 'Y' #>  #>  #>   Analysis function: #>            name                     label #> 1 'ae_forestly' 'Interactive forest plot' meta |>   prepare_ae_forestly(     population = \"apat\",     observation = \"wk12\",     parameter = \"any;rel;ser\"   ) |>   format_ae_forestly() |>   ae_forestly() meta |>   prepare_ae_forestly(     population = \"apat\",     observation = \"period1\",     parameter = \"any;rel;ser\"   ) |>   format_ae_forestly() |>   ae_forestly()"},{"path":"https://elong0527.github.io/forestly/articles/layout.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Controlling Layout","text":"forestly package controls forest plot layouts simple effective approach. illustrate idea, use ADSL (forestly_adsl_3grp) ADAE (forestly_adae_3grp) datasets forestly package contain three treatment groups. first step create required metadata using meta_forestly(). use prepare_ae_forestly() prepare input datasets interactive forest plot. outdata contains parameters required generate interactive forest plot. interactive forest plot default style can generated.","code":"metadata <- meta_forestly(   dataset_adsl = forestly_adsl_3grp,   dataset_adae = forestly_adae_3grp,   population_term = \"apat\",   observation_term = \"wk12\" )  outdata <- metadata |> prepare_ae_forestly(parameter = \"any;rel;ser\")  outdata #> List of 17 #>  $ meta           :List of 7 #>  $ population     : chr \"apat\" #>  $ observation    : chr \"wk12\" #>  $ parameter      : chr \"any;rel;ser\" #>  $ n              :'data.frame': 361 obs. of  4 variables: #>  $ order          : num [1:361] 1030 1031 1032 1033 1034 ... #>  $ group          : chr [1:4] \"Placebo\" \"Low Dose\" \"High Dose\" \"Total\" #>  $ reference_group: num 1 #>  $ parameter_order: Factor w/ 3 levels \"any\",\"rel\",\"ser\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ prop           :'data.frame': 361 obs. of  4 variables: #>  $ diff           :'data.frame': 361 obs. of  2 variables: #>  $ n_pop          :'data.frame': 1 obs. of  4 variables: #>  $ name           : chr [1:361] \"Atrial fibrillation\" \"Atrial flutter\" \"Atrial hypertrophy\" \"Atrioventricular block first degree\" ... #>  $ ci_lower       :'data.frame': 361 obs. of  2 variables: #>  $ ci_upper       :'data.frame': 361 obs. of  2 variables: #>  $ p              :'data.frame': 361 obs. of  2 variables: #>  $ ae_listing     :'data.frame': 1898 obs. of  15 variables: outdata |>   format_ae_forestly() |>   ae_forestly()"},{"path":"https://elong0527.github.io/forestly/articles/layout.html","id":"change-color","dir":"Articles","previous_headings":"","what":"Change color","title":"Controlling Layout","text":"default, forestly using teal treatment group plum control group. user wants change color, color argument format_ae_forestly() function can used. example interactive forest plot using black grey.","code":"outdata |>   format_ae_forestly(color = c(\"black\", \"grey60\", \"grey40\")) |>   ae_forestly()"},{"path":"https://elong0527.github.io/forestly/articles/layout.html","id":"display-different-columns","dir":"Articles","previous_headings":"","what":"Display different columns","title":"Controlling Layout","text":"using display argument format_ae_forestly(), can display total column. can also display risk difference columns similar approach.","code":"outdata |>   format_ae_forestly(display = c(\"n\", \"prop\", \"fig_prop\", \"fig_diff\", \"total\")) |>   ae_forestly() outdata |>   format_ae_forestly(display = c(\"n\", \"prop\", \"fig_prop\", \"fig_diff\", \"diff\")) |>   ae_forestly()"},{"path":"https://elong0527.github.io/forestly/articles/layout.html","id":"control-column-width","dir":"Articles","previous_headings":"","what":"Control column width","title":"Controlling Layout","text":"can control column width customize layout.","code":"outdata |>   format_ae_forestly(     width_fig = 230,     footer_space = 110   ) |>   ae_forestly(width = 1000)"},{"path":"https://elong0527.github.io/forestly/articles/layout.html","id":"change-variable-listed-in-drill-down-table","dir":"Articles","previous_headings":"","what":"Change variable listed in drill-down table","title":"Controlling Layout","text":"Users can explore AE listing clicking \\(\\blacktriangleright\\) row specify column names ae_listing_display.","code":"listing_var <- c(   \"SEX\", \"RACE\", \"AGE\",   \"SITEID\", \"AESEV\", \"STUDYID\",   \"AESER\", \"AEREL\", \"ASTDT\", \"AENDT\" )  metadata |>   prepare_ae_forestly(     parameter = \"any;rel;ser\",     ae_listing_display = listing_var   ) |>   format_ae_forestly() |>   ae_forestly()"},{"path":"https://elong0527.github.io/forestly/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Yilong Zhang. Author. Benjamin Wang. Author, maintainer. Yujie Zhao. Author. Nan Xiao. Contributor. Xuan Deng. Contributor. Merck & Co., Inc., Rahway, NJ, USA affiliates. Copyright holder.","code":""},{"path":"https://elong0527.github.io/forestly/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhang Y, Wang B, Zhao Y (2023). forestly: Interactive Forest Plot. https://merck.github.io/forestly/, https://github.com/Merck/forestly.","code":"@Manual{,   title = {forestly: Interactive Forest Plot},   author = {Yilong Zhang and Benjamin Wang and Yujie Zhao},   year = {2023},   note = {https://merck.github.io/forestly/, https://github.com/Merck/forestly}, }"},{"path":[]},{"path":"https://elong0527.github.io/forestly/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Interactive Forest Plot","text":"forestly package creates interactive forest plots clinical trial analysis & reporting. Specific adverse events analysis Subgroup analysis assume ADaM datasets ready analysis leverage metalite data structure define inputs outputs.","code":""},{"path":"https://elong0527.github.io/forestly/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Interactive Forest Plot","text":"general workflow : meta_forestly() constructs input metadata treatment analysis ADaM datasets. prepare_ae_forestly() prepares datasets interactive forest plot. format_ae_forestly() formats output layout. ae_forestly() generates interactive forest plot. quick example","code":"library(\"forestly\")  meta_forestly(   forestly_adsl,   forestly_adae,   population_term = \"apat\",   observation_term = \"wk12\" ) |>   prepare_ae_forestly(parameter = \"any;rel;ser\") |>   format_ae_forestly() |>   ae_forestly()"},{"path":"https://elong0527.github.io/forestly/index.html","id":"interactive-features","dir":"","previous_headings":"","what":"Interactive features","title":"Interactive Forest Plot","text":"interactive features safety analysis include: Select different AE criteria. Filter incidence AE one groups. Reveal information hovering mouse data point. Search bars find subjects selected adverse events (AEs). Sort value clicking column header. Drill-listing clicking ▸.","code":""},{"path":"https://elong0527.github.io/forestly/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Interactive Forest Plot","text":"Paper: 2023 PHUSE US Connect Talk: 2021 R/Pharma Conference","code":""},{"path":"https://elong0527.github.io/forestly/reference/ae_forestly.html","id":null,"dir":"Reference","previous_headings":"","what":"Display interactive forest plot — ae_forestly","title":"Display interactive forest plot — ae_forestly","text":"Display interactive forest plot","code":""},{"path":"https://elong0527.github.io/forestly/reference/ae_forestly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display interactive forest plot — ae_forestly","text":"","code":"ae_forestly(outdata, filter = c(\"prop\", \"n\"), width = 1400)"},{"path":"https://elong0527.github.io/forestly/reference/ae_forestly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display interactive forest plot — ae_forestly","text":"outdata outdata object created format_ae_forestly(). filter character value filter variable. width numeric value width table pixels.","code":""},{"path":"https://elong0527.github.io/forestly/reference/ae_forestly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display interactive forest plot — ae_forestly","text":"AE forest plot saved shiny.tag.list object.","code":""},{"path":"https://elong0527.github.io/forestly/reference/ae_forestly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display interactive forest plot — ae_forestly","text":"","code":"adsl <- forestly_adsl[1:100, ] adae <- forestly_adae[1:100, ] if (interactive()) {   meta_forestly(     dataset_adsl = adsl,     dataset_adae = adae,     population_term = \"apat\",     observation_term = \"wk12\"   ) |>     prepare_ae_forestly(parameter = \"any;rel\") |>     format_ae_forestly() |>     ae_forestly() }"},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae.html","id":null,"dir":"Reference","previous_headings":"","what":"An adverse event dataset — forestly_adae","title":"An adverse event dataset — forestly_adae","text":"dataset containing adverse event information clinical trial following CDISC ADaM standard.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An adverse event dataset — forestly_adae","text":"","code":"forestly_adae"},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An adverse event dataset — forestly_adae","text":"data frame 736 rows 56 variables.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An adverse event dataset — forestly_adae","text":"https://github.com/phuse-org/phuse-scripts/tree/master/data/adam/cdisc","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An adverse event dataset — forestly_adae","text":"Definition variable can found https://github.com/phuse-org/phuse-scripts/tree/master/data/adam/cdisc.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae_3grp.html","id":null,"dir":"Reference","previous_headings":"","what":"An adverse event dataset — forestly_adae_3grp","title":"An adverse event dataset — forestly_adae_3grp","text":"dataset containing adverse event information clinical trial following CDISC ADaM standard.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae_3grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An adverse event dataset — forestly_adae_3grp","text":"","code":"forestly_adae_3grp"},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae_3grp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"An adverse event dataset — forestly_adae_3grp","text":"data frame 1191 rows 56 variables.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae_3grp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"An adverse event dataset — forestly_adae_3grp","text":"https://github.com/phuse-org/phuse-scripts/tree/master/data/adam/cdisc","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adae_3grp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An adverse event dataset — forestly_adae_3grp","text":"Definition variable can found https://github.com/phuse-org/phuse-scripts/tree/master/data/adam/cdisc.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl.html","id":null,"dir":"Reference","previous_headings":"","what":"A subject level demographic dataset — forestly_adsl","title":"A subject level demographic dataset — forestly_adsl","text":"dataset containing demographic information clinical trial following CDISC ADaM standard.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A subject level demographic dataset — forestly_adsl","text":"","code":"forestly_adsl"},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A subject level demographic dataset — forestly_adsl","text":"data frame 170 rows 49 variables.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A subject level demographic dataset — forestly_adsl","text":"https://github.com/phuse-org/phuse-scripts/tree/master/data/adam/cdisc","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A subject level demographic dataset — forestly_adsl","text":"Definition variable can found https://github.com/phuse-org/phuse-scripts/tree/master/data/adam/cdisc.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl_3grp.html","id":null,"dir":"Reference","previous_headings":"","what":"A subject level demographic dataset — forestly_adsl_3grp","title":"A subject level demographic dataset — forestly_adsl_3grp","text":"dataset containing demographic information clinical trial following CDISC ADaM standard.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl_3grp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A subject level demographic dataset — forestly_adsl_3grp","text":"","code":"forestly_adsl_3grp"},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl_3grp.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A subject level demographic dataset — forestly_adsl_3grp","text":"data frame 254 rows 49 variables.","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl_3grp.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A subject level demographic dataset — forestly_adsl_3grp","text":"https://github.com/phuse-org/phuse-scripts/tree/master/data/adam/cdisc","code":""},{"path":"https://elong0527.github.io/forestly/reference/forestly_adsl_3grp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A subject level demographic dataset — forestly_adsl_3grp","text":"Definition variable can found https://github.com/phuse-org/phuse-scripts/tree/master/data/adam/cdisc.","code":""},{"path":"https://elong0527.github.io/forestly/reference/format_ae_forestly.html","id":null,"dir":"Reference","previous_headings":"","what":"Format outdata for interactive forest plot — format_ae_forestly","title":"Format outdata for interactive forest plot — format_ae_forestly","text":"Format outdata interactive forest plot","code":""},{"path":"https://elong0527.github.io/forestly/reference/format_ae_forestly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format outdata for interactive forest plot — format_ae_forestly","text":"","code":"format_ae_forestly(   outdata,   display = c(\"n\", \"prop\", \"fig_prop\", \"fig_diff\"),   digits = 1,   width_term = 200,   width_fig = 320,   width_n = 40,   width_prop = 60,   width_diff = 80,   footer_space = 90,   color = NULL,   diff_label = \"Treatment <- Favor -> Placebo\",   show_ae_parameter = FALSE )"},{"path":"https://elong0527.github.io/forestly/reference/format_ae_forestly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format outdata for interactive forest plot — format_ae_forestly","text":"outdata outdata object created prepare_ae_forestly(). display character vector measurement displayed. n: Number subjects AE. prop: Proportion subjects AE. total: Total columns. diff: Risk difference. digits value digits displayed proportion risk difference. width_term Width px AE term column. width_fig Width px proportion risk difference figure. width_n Width px \"N\" columns. width_prop Width px \"(%)\" columns. width_diff Width px risk difference columns. footer_space Space px footer display legend. color vector colors analysis groups. Default value supports 4 groups. diff_label x-axis label risk difference. show_ae_parameter boolean value display AE parameter column.","code":""},{"path":"https://elong0527.github.io/forestly/reference/format_ae_forestly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format outdata for interactive forest plot — format_ae_forestly","text":"outdata object.","code":""},{"path":"https://elong0527.github.io/forestly/reference/format_ae_forestly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format outdata for interactive forest plot — format_ae_forestly","text":"","code":"adsl <- forestly_adsl[1:100,] adae <- forestly_adae[1:100,] meta_forestly(   dataset_adsl = adsl,   dataset_adae = adae,   population_term = \"apat\",   observation_term = \"wk12\" ) |>   prepare_ae_forestly(parameter = \"any;rel\")|>   format_ae_forestly() #> List of 21 #>  $ meta                   :List of 7 #>  $ population             : chr \"apat\" #>  $ observation            : chr \"wk12\" #>  $ parameter              : chr \"any;rel\" #>  $ n                      :'data.frame':\t60 obs. of  3 variables: #>  $ order                  : num [1:60] 1008 1009 2019 2021 2022 ... #>  $ group                  : chr [1:3] \"Placebo\" \"Xanomeline Low Dose\" \"Total\" #>  $ reference_group        : num 2 #>  $ parameter_order        : Factor w/ 2 levels \"any\",\"rel\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ prop                   :'data.frame':\t60 obs. of  3 variables: #>  $ diff                   :'data.frame':\t60 obs. of  1 variable: #>  $ n_pop                  :'data.frame':\t1 obs. of  3 variables: #>  $ name                   : chr [1:60] \"Atrioventricular block second degree\" \"Bundle branch block left\" \"Eye allergy\" \"Eye pruritus\" ... #>  $ ci_lower               :'data.frame':\t60 obs. of  1 variable: #>  $ ci_upper               :'data.frame':\t60 obs. of  1 variable: #>  $ p                      :'data.frame':\t60 obs. of  1 variable: #>  $ ae_listing             :'data.frame':\t151 obs. of  15 variables: #>  $ tbl                    :'data.frame':\t60 obs. of  13 variables: #>  $ reactable_columns      :List of 13 #>  $ reactable_columns_group:List of 3 #>  $ display                : chr [1:4] \"n\" \"prop\" \"fig_prop\" \"fig_diff\""},{"path":"https://elong0527.github.io/forestly/reference/meta_forestly.html","id":null,"dir":"Reference","previous_headings":"","what":"Create metadata for interactive forest plot — meta_forestly","title":"Create metadata for interactive forest plot — meta_forestly","text":"Create metadata interactive forest plot","code":""},{"path":"https://elong0527.github.io/forestly/reference/meta_forestly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create metadata for interactive forest plot — meta_forestly","text":"","code":"meta_forestly(   dataset_adsl,   dataset_adae,   population_term,   population_subset = SAFFL == \"Y\",   observation_term,   observation_subset = SAFFL == \"Y\",   parameter_term = \"any;rel;ser\" )"},{"path":"https://elong0527.github.io/forestly/reference/meta_forestly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create metadata for interactive forest plot — meta_forestly","text":"dataset_adsl ADSL source dataset. dataset_adae ADAE source dataset. population_term character value population term name. population_subset unquoted condition selecting populations ADSL dataset. observation_term character value observation term name. observation_subset unquoted condition selecting observations ADAE dataset. parameter_term character value parameter term name.","code":""},{"path":"https://elong0527.github.io/forestly/reference/meta_forestly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create metadata for interactive forest plot — meta_forestly","text":"metalite object.","code":""},{"path":"https://elong0527.github.io/forestly/reference/meta_forestly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create metadata for interactive forest plot — meta_forestly","text":"","code":"meta_forestly(   forestly_adsl,   forestly_adae,   population_term = \"apat\",   observation_term = \"wk12\" ) #> ADaM metadata:  #>    .$data_population \tPopulation data with 170 subjects  #>    .$data_observation \tObservation data with 736 records  #>    .$plan \tAnalysis plan with 1 plans  #>  #>  #>   Analysis population type: #>     name        id  group var       subset label #> 1 'apat' 'USUBJID' 'TRTA'     SAFFL == 'Y'    '' #>  #>  #>   Analysis observation type: #>     name        id  group var       subset label #> 1 'wk12' 'USUBJID' 'TRTA'     SAFFL == 'Y'    '' #>  #>  #>   Analysis parameter type: #>    name                         label                     subset #> 1 'any'          'any adverse events'                            #> 2 'rel' 'drug-related adverse events' toupper(AREL) == 'RELATED' #> 3 'ser'      'serious adverse events'               AESER == 'Y' #>  #>  #>   Analysis function: #>            name                     label #> 1 'ae_forestly' 'Interactive forest plot' #>"},{"path":"https://elong0527.github.io/forestly/reference/prepare_ae_forestly.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare datasets for interactive forest plot — prepare_ae_forestly","title":"Prepare datasets for interactive forest plot — prepare_ae_forestly","text":"Prepare datasets interactive forest plot","code":""},{"path":"https://elong0527.github.io/forestly/reference/prepare_ae_forestly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare datasets for interactive forest plot — prepare_ae_forestly","text":"","code":"prepare_ae_forestly(   meta,   population = NULL,   observation = NULL,   parameter,   reference_group = NULL,   ae_listing_display = c(\"SEX\", \"RACE\", \"AGE\", \"ASTDY\", \"AESEV\", \"AESER\", \"AEREL\",     \"AEACN\", \"AEOUT\", \"SITEID\", \"ADURN\", \"ADURU\") )"},{"path":"https://elong0527.github.io/forestly/reference/prepare_ae_forestly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare datasets for interactive forest plot — prepare_ae_forestly","text":"meta metadata object created metalite. population character value population term name. term name used key link information. observation character value observation term name. term name used key link information. parameter character value parameter term name. term name used key link information. reference_group integer indicate reference group. Default 2 2 groups, otherwise, default 1. ae_listing_display vector name variables used display AE listing table.","code":""},{"path":"https://elong0527.github.io/forestly/reference/prepare_ae_forestly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare datasets for interactive forest plot — prepare_ae_forestly","text":"outdata object.","code":""},{"path":"https://elong0527.github.io/forestly/reference/prepare_ae_forestly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare datasets for interactive forest plot — prepare_ae_forestly","text":"","code":"adsl <- forestly_adsl[1:100,] adae <- forestly_adae[1:100,] meta_forestly(   dataset_adsl = adsl,   dataset_adae = adae,   population_term = \"apat\",   observation_term = \"wk12\" ) |>   prepare_ae_forestly(parameter = \"any;rel\") #> List of 17 #>  $ meta           :List of 7 #>  $ population     : chr \"apat\" #>  $ observation    : chr \"wk12\" #>  $ parameter      : chr \"any;rel\" #>  $ n              :'data.frame':\t60 obs. of  3 variables: #>  $ order          : num [1:60] 1008 1009 2019 2021 2022 ... #>  $ group          : chr [1:3] \"Placebo\" \"Xanomeline Low Dose\" \"Total\" #>  $ reference_group: num 2 #>  $ parameter_order: Factor w/ 2 levels \"any\",\"rel\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ prop           :'data.frame':\t60 obs. of  3 variables: #>  $ diff           :'data.frame':\t60 obs. of  1 variable: #>  $ n_pop          :'data.frame':\t1 obs. of  3 variables: #>  $ name           : chr [1:60] \"Atrioventricular block second degree\" \"Bundle branch block left\" \"Eye allergy\" \"Eye pruritus\" ... #>  $ ci_lower       :'data.frame':\t60 obs. of  1 variable: #>  $ ci_upper       :'data.frame':\t60 obs. of  1 variable: #>  $ p              :'data.frame':\t60 obs. of  1 variable: #>  $ ae_listing     :'data.frame':\t151 obs. of  15 variables:"},{"path":"https://elong0527.github.io/forestly/news/index.html","id":"forestly-010","dir":"Changelog","previous_headings":"","what":"forestly 0.1.0","title":"forestly 0.1.0","text":"CRAN release: 2023-07-19 Initial version. Added NEWS.md file track changes package.","code":""}]
